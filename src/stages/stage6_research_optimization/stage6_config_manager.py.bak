"""
⚙️ Stage 6 Configuration Manager

Specialized configuration manager for Stage 6: Research Data Generation & Optimization.
Inherits from BaseConfigManager to provide unified configuration management.

Author: Orbit Engine Refactoring Team
Date: 2025-10-15 (Phase 4 - P1 Refactoring)

Usage:
------
```python
from stages.stage6_research_optimization.stage6_config_manager import Stage6ConfigManager

manager = Stage6ConfigManager()
config = manager.load_config()  # Loads from YAML + env overrides
print(config['gpp_events']['a3']['offset_db'])  # 3.0
```
"""

import logging
from typing import Dict, Any, Optional, Tuple
from pathlib import Path

from shared.config_manager import BaseConfigManager


class Stage6ConfigManager(BaseConfigManager):
    """
    Stage 6 Configuration Manager

    Manages configuration for research data generation and 3GPP handover optimization.
    Provides defaults matching existing behavior for backward compatibility.
    """

    def __init__(self, logger_instance: Optional[logging.Logger] = None):
        """
        Initialize Stage 6 configuration manager

        Args:
            logger_instance: Optional logger instance
        """
        super().__init__(logger_instance)

    def get_stage_number(self) -> int:
        """
        Return Stage 6 identifier

        Returns:
            int: Stage number (6)
        """
        return 6

    def get_default_config(self) -> Dict[str, Any]:
        """
        Return default Stage 6 configuration

        Provides sensible defaults matching current hardcoded behavior.
        All defaults include SOURCE annotations for academic compliance.

        Returns:
            Dict[str, Any]: Default configuration dictionary
        """
        return {
            # ==================== 3GPP 事件檢測配置 ====================
            'gpp_events': {
                'a3': {
                    'offset_db': 3.0,  # SOURCE: 3GPP TS 38.331 v18.5.1 Section 5.5.4.4
                    'hysteresis_db': 2.0,
                    'time_to_trigger_ms': 100
                },
                'a4': {
                    'rsrp_threshold_dbm': -100.0,
                    'hysteresis_db': 2.0,
                    'time_to_trigger_ms': 100
                },
                'a5': {
                    'rsrp_threshold1_dbm': -110.0,
                    'rsrp_threshold2_dbm': -95.0,
                    'hysteresis_db': 2.0,
                    'time_to_trigger_ms': 100
                },
                'd2': {
                    'starlink': {
                        'd2_threshold1_km': 800.0,
                        'd2_threshold2_km': 1500.0
                    },
                    'oneweb': {
                        'd2_threshold1_km': 1500.0,
                        'd2_threshold2_km': 2200.0
                    },
                    'hysteresis_km': 50.0,
                    'time_to_trigger_ms': 100
                }
            },

            # ==================== 動態衛星池驗證配置 ====================
            'pool_verification': {
                'starlink': {
                    'target_min': 10,
                    'target_max': 15,
                    'tolerance_ratio': 0.1
                },
                'oneweb': {
                    'target_min': 3,
                    'target_max': 6,
                    'tolerance_ratio': 0.1
                }
            },

            # ==================== ML 訓練數據生成配置 ====================
            'ml_training': {
                'enabled': False,  # ML Training Data Generator 已移除
                'algorithms': ['DQN', 'A3C', 'PPO', 'SAC'],
                'state_features': [
                    'rsrp_dbm', 'rsrq_db', 'sinr_db',
                    'distance_km', 'elevation_deg',
                    'link_margin_db', 'doppler_shift_khz'
                ],
                'actions': [
                    'maintain_connection', 'handover_to_best',
                    'handover_to_nearest', 'handover_to_stable'
                ],
                'reward_weights': {
                    'signal_quality': 0.4,
                    'connection_stability': 0.3,
                    'handover_cost': -0.2,
                    'coverage_continuity': 0.1
                }
            },

            # ==================== 換手決策評估配置 ====================
            'decision_support': {
                'target_latency_ms': 100,
                'strategy': 'signal_based',  # signal_based | distance_based | hybrid
                'handover_thresholds': {
                    'min_rsrp_improvement_db': 5.0,
                    'min_link_margin_db': 3.0,
                    'max_handover_rate_per_minute': 6
                }
            },

            # ==================== 驗證框架配置 ====================
            'validation': {
                'gpp_standard_compliance': {
                    'min_events_detected': 1,
                    'check_event_types': True
                },
                'ml_training_data_quality': {
                    'min_training_samples': 1000,
                    'check_feature_completeness': True
                },
                'satellite_pool_optimization': {
                    'require_pool_verification_pass': True,
                    'check_time_series_completeness': True
                },
                'real_time_decision_performance': {
                    'max_decision_latency_ms': 100,
                    'min_decision_success_rate': 0.95
                },
                'research_goal_achievement': {
                    'starlink_achievement_threshold': 0.9,
                    'oneweb_achievement_threshold': 0.9,
                    'continuous_coverage_required': True
                }
            },

            # ==================== 動態閾值處理配置 ====================
            'dynamic_thresholds': {
                'allow_missing_dynamic_thresholds': False,  # Grade A+ Fail-Fast
                'use_stage4_dynamic_thresholds': True
            },

            # ==================== 輸出配置 ====================
            'output': {
                'directory': 'data/outputs/stage6',
                'filename_pattern': 'stage6_research_optimization_{timestamp}.json',
                'save_validation_snapshot': True,
                'format': 'json'
            },

            # ==================== 性能配置 ====================
            'performance': {
                'log_level': 'INFO',
                'show_detailed_stats': True,
                'enable_profiling': False
            },

            # ==================== 學術標準配置 ====================
            'academic_standards': {
                'standard_level': 'Grade_A',
                'compliance_checks': {
                    'gpp_standard_compliance': True,
                    'ml_research_readiness': True,
                    'real_time_capability': True
                },
                'fail_fast_on_missing_data': True
            }
        }

    def validate_config(self, config: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
        """
        Validate Stage 6 configuration

        Checks:
        - 3GPP event parameters are within valid ranges
        - Pool verification targets are valid
        - Decision support thresholds are valid
        - Validation framework settings are consistent

        Args:
            config: Configuration dictionary to validate

        Returns:
            Tuple[bool, Optional[str]]: (is_valid, error_message)
        """
        # Validate 3GPP event configuration
        if 'gpp_events' in config:
            gpp_events = config['gpp_events']

            # Validate A3 event
            if 'a3' in gpp_events:
                a3 = gpp_events['a3']
                if 'offset_db' in a3:
                    if a3['offset_db'] < -30 or a3['offset_db'] > 30:
                        return False, "gpp_events.a3.offset_db 必須在 -30 到 30 dB 範圍內"
                if 'hysteresis_db' in a3:
                    if a3['hysteresis_db'] < 0 or a3['hysteresis_db'] > 15:
                        return False, "gpp_events.a3.hysteresis_db 必須在 0 到 15 dB 範圍內"

            # Validate A4 event
            if 'a4' in gpp_events:
                a4 = gpp_events['a4']
                if 'rsrp_threshold_dbm' in a4:
                    if a4['rsrp_threshold_dbm'] < -156 or a4['rsrp_threshold_dbm'] > -31:
                        return False, "gpp_events.a4.rsrp_threshold_dbm 必須在 -156 到 -31 dBm 範圍內"

            # Validate A5 event
            if 'a5' in gpp_events:
                a5 = gpp_events['a5']
                if 'rsrp_threshold1_dbm' in a5:
                    if a5['rsrp_threshold1_dbm'] < -156 or a5['rsrp_threshold1_dbm'] > -31:
                        return False, "gpp_events.a5.rsrp_threshold1_dbm 必須在 -156 到 -31 dBm 範圍內"
                if 'rsrp_threshold2_dbm' in a5:
                    if a5['rsrp_threshold2_dbm'] < -156 or a5['rsrp_threshold2_dbm'] > -31:
                        return False, "gpp_events.a5.rsrp_threshold2_dbm 必須在 -156 到 -31 dBm 範圍內"

            # Validate D2 event
            if 'd2' in gpp_events:
                d2 = gpp_events['d2']
                for constellation in ['starlink', 'oneweb']:
                    if constellation in d2:
                        const_d2 = d2[constellation]
                        if 'd2_threshold1_km' in const_d2 and 'd2_threshold2_km' in const_d2:
                            if const_d2['d2_threshold1_km'] >= const_d2['d2_threshold2_km']:
                                return False, (
                                    f"gpp_events.d2.{constellation}.d2_threshold1_km 必須小於 "
                                    f"d2_threshold2_km"
                                )

        # Validate pool verification configuration
        if 'pool_verification' in config:
            for constellation in ['starlink', 'oneweb']:
                if constellation in config['pool_verification']:
                    pool = config['pool_verification'][constellation]
                    if 'target_min' in pool and 'target_max' in pool:
                        if pool['target_min'] > pool['target_max']:
                            return False, (
                                f"pool_verification.{constellation}.target_min 必須小於或等於 target_max"
                            )
                    if 'tolerance_ratio' in pool:
                        if pool['tolerance_ratio'] < 0 or pool['tolerance_ratio'] > 1:
                            return False, (
                                f"pool_verification.{constellation}.tolerance_ratio 必須在 0 到 1 範圍內"
                            )

        # Validate decision support configuration
        if 'decision_support' in config:
            decision = config['decision_support']
            if 'strategy' in decision:
                valid_strategies = ['signal_based', 'distance_based', 'hybrid']
                if decision['strategy'] not in valid_strategies:
                    return False, (
                        f"decision_support.strategy 必須是 {valid_strategies} 之一，"
                        f"實際: {decision['strategy']}"
                    )
            if 'handover_thresholds' in decision:
                thresholds = decision['handover_thresholds']
                if 'min_rsrp_improvement_db' in thresholds:
                    if thresholds['min_rsrp_improvement_db'] < 0:
                        return False, "handover_thresholds.min_rsrp_improvement_db 必須是非負數"
                if 'min_link_margin_db' in thresholds:
                    if thresholds['min_link_margin_db'] < 0:
                        return False, "handover_thresholds.min_link_margin_db 必須是非負數"

        # All validations passed
        return True, None
