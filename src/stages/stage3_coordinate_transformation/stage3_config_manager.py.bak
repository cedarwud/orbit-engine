"""
⚙️ Stage 3 Configuration Manager

Specialized configuration manager for Stage 3: Coordinate System Transformation.
Inherits from BaseConfigManager to provide unified configuration management.

Author: Orbit Engine Refactoring Team
Date: 2025-10-15 (Phase 4 - P1 Refactoring)

Usage:
------
```python
from stages.stage3_coordinate_transformation.stage3_config_manager import Stage3ConfigManager

manager = Stage3ConfigManager()
config = manager.load_config()  # Loads from YAML + env overrides
print(config['coordinate_config']['source_frame'])  # 'TEME'
```
"""

import logging
from typing import Dict, Any, Optional, Tuple
from pathlib import Path

from shared.config_manager import BaseConfigManager


class Stage3ConfigManager(BaseConfigManager):
    """
    Stage 3 Configuration Manager

    Manages configuration for coordinate system transformation (TEME → WGS84).
    Provides defaults matching existing behavior for backward compatibility.
    """

    def __init__(self, logger_instance: Optional[logging.Logger] = None):
        """
        Initialize Stage 3 configuration manager

        Args:
            logger_instance: Optional logger instance
        """
        super().__init__(logger_instance)

    def get_stage_number(self) -> int:
        """
        Return Stage 3 identifier

        Returns:
            int: Stage number (3)
        """
        return 3

    def get_default_config(self) -> Dict[str, Any]:
        """
        Return default Stage 3 configuration

        Provides sensible defaults matching current hardcoded behavior.
        All defaults include SOURCE annotations for academic compliance.

        Returns:
            Dict[str, Any]: Default configuration dictionary
        """
        return {
            # ==================== 幾何預篩選配置 ====================
            'geometric_prefilter': {
                'enabled': False  # v3.1: 已禁用預篩選
            },

            # ==================== 座標轉換配置 ====================
            'coordinate_config': {
                'source_frame': 'TEME',  # SOURCE: Stage 2 SGP4 輸出
                'target_frame': 'WGS84',  # SOURCE: GPS 標準
                'time_corrections': True,  # SOURCE: IAU 標準要求
                'polar_motion': True,
                'nutation_model': 'IAU2000A'  # SOURCE: IAU SOFA Standards
            },

            # ==================== 精度配置 ====================
            'precision_config': {
                'target_accuracy_m': 0.5,  # SOURCE: 研究需求 - 亞米級精度
                'convergence_threshold_m': 0.001,
                'max_iterations': 10
            },

            # ==================== IERS 數據配置 ====================
            'iers_data': {
                'cache_directory': 'data/cache/iers',
                'auto_download': True,
                'expiry_warning_days': 30
            },

            # ==================== Reference Frames ====================
            'reference_frames': {
                'wgs84': {
                    'semi_major_axis_m': 6378137.0,
                    'flattening': 0.00335281066474748
                }
            },

            # ==================== HDF5 緩存配置 ====================
            'cache_config': {
                'enabled': True,  # PURPOSE: 加速重複執行
                'cache_directory': 'data/cache/stage3',
                'filename_pattern': 'coordinate_cache.h5',
                'validate_by_timestamp': True,
                'auto_cleanup': True,
                'max_cache_size_mb': 500
            },

            # ==================== 並行處理配置 ====================
            'parallel_config': {
                'max_workers': 0,  # 0 = auto-detect
                'chunk_size': 100,
                'show_progress': True
            },

            # ==================== 輸出配置 ====================
            'output': {
                'directory': 'data/outputs/stage3',
                'filename_pattern': 'stage3_coordinate_transformation_real_{timestamp}.json',
                'save_validation_snapshot': True,
                'format': 'json'
            },

            # ==================== 驗證配置 ====================
            'validation': {
                'coordinate_range_check': True,
                'valid_ranges': {
                    'latitude_deg': [-90, 90],
                    'longitude_deg': [-180, 180],
                    'altitude_km': [200, 2000]
                },
                'data_integrity_check': True,
                'min_data_points': 180
            },

            # ==================== 性能配置 ====================
            'performance': {
                'memory_limit_mb': 8192,
                'log_level': 'INFO',
                'enable_profiling': False
            }
        }

    def validate_config(self, config: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
        """
        Validate Stage 3 configuration

        Checks:
        - Source/target frames are valid
        - Nutation model is valid
        - Precision parameters are positive
        - Coordinate ranges are valid
        - Cache settings are valid
        - Parallel processing config is valid

        Args:
            config: Configuration dictionary to validate

        Returns:
            Tuple[bool, Optional[str]]: (is_valid, error_message)
        """
        # Validate coordinate configuration
        if 'coordinate_config' in config:
            coord_config = config['coordinate_config']

            # Check source frame
            if 'source_frame' in coord_config:
                valid_source_frames = ['TEME', 'GCRF', 'ICRF']
                if coord_config['source_frame'] not in valid_source_frames:
                    return False, (
                        f"coordinate_config.source_frame 必須是 {valid_source_frames} 之一，"
                        f"實際: {coord_config['source_frame']}"
                    )

            # Check target frame
            if 'target_frame' in coord_config:
                valid_target_frames = ['WGS84', 'ITRF']
                if coord_config['target_frame'] not in valid_target_frames:
                    return False, (
                        f"coordinate_config.target_frame 必須是 {valid_target_frames} 之一，"
                        f"實際: {coord_config['target_frame']}"
                    )

            # Check nutation model
            if 'nutation_model' in coord_config:
                valid_models = ['IAU2000A', 'IAU2000B', 'IAU1980']
                if coord_config['nutation_model'] not in valid_models:
                    return False, (
                        f"coordinate_config.nutation_model 必須是 {valid_models} 之一，"
                        f"實際: {coord_config['nutation_model']}"
                    )

        # Validate precision configuration
        if 'precision_config' in config:
            precision = config['precision_config']

            # Check target accuracy
            if 'target_accuracy_m' in precision:
                if precision['target_accuracy_m'] <= 0:
                    return False, "precision_config.target_accuracy_m 必須是正數"

            # Check convergence threshold
            if 'convergence_threshold_m' in precision:
                if precision['convergence_threshold_m'] <= 0:
                    return False, "precision_config.convergence_threshold_m 必須是正數"

            # Check max iterations
            if 'max_iterations' in precision:
                if not isinstance(precision['max_iterations'], int) or \
                   precision['max_iterations'] <= 0:
                    return False, "precision_config.max_iterations 必須是正整數"

        # Validate cache configuration
        if 'cache_config' in config:
            cache = config['cache_config']

            # Check max cache size
            if 'max_cache_size_mb' in cache:
                if cache['max_cache_size_mb'] <= 0:
                    return False, "cache_config.max_cache_size_mb 必須是正數"

        # Validate parallel configuration
        if 'parallel_config' in config:
            parallel = config['parallel_config']

            # Check max workers
            if 'max_workers' in parallel:
                if not isinstance(parallel['max_workers'], int) or \
                   parallel['max_workers'] < 0:
                    return False, "parallel_config.max_workers 必須是非負整數（0表示自動檢測）"

            # Check chunk size
            if 'chunk_size' in parallel:
                if not isinstance(parallel['chunk_size'], int) or \
                   parallel['chunk_size'] <= 0:
                    return False, "parallel_config.chunk_size 必須是正整數"

        # Validate coordinate ranges
        if 'validation' in config and 'valid_ranges' in config['validation']:
            ranges = config['validation']['valid_ranges']

            # Check latitude range
            if 'latitude_deg' in ranges:
                lat_range = ranges['latitude_deg']
                if len(lat_range) != 2 or lat_range[0] != -90 or lat_range[1] != 90:
                    return False, "validation.valid_ranges.latitude_deg 必須是 [-90, 90]"

            # Check longitude range
            if 'longitude_deg' in ranges:
                lon_range = ranges['longitude_deg']
                if len(lon_range) != 2 or lon_range[0] != -180 or lon_range[1] != 180:
                    return False, "validation.valid_ranges.longitude_deg 必須是 [-180, 180]"

            # Check altitude range
            if 'altitude_km' in ranges:
                alt_range = ranges['altitude_km']
                if len(alt_range) != 2 or alt_range[0] <= 0:
                    return False, "validation.valid_ranges.altitude_km 範圍必須為正數"

        # All validations passed
        return True, None
