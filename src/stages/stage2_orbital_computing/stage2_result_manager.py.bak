#!/usr/bin/env python3
"""
Stage 2: 結果管理模組 (重構版本 - 使用 BaseResultManager)

整合原有的 Stage2ResultManager 功能，使用 Template Method Pattern 消除代碼重複。

支援格式：
- JSON：向後兼容，易讀性高
- HDF5：高效壓縮，學術標準格式

Author: ORBIT Engine Team
Created: 2025-10-12 (Phase 3 Refactoring)
"""

import logging
import json
import os
import glob
import numpy as np
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Any, Optional

# Phase 3 Refactoring: Import base class
from shared.base_result_manager import BaseResultManager

try:
    import h5py
    HDF5_AVAILABLE = True
except ImportError:
    HDF5_AVAILABLE = False
    logging.warning("⚠️ h5py 未安裝，HDF5 格式不可用")


class Stage2ResultManager(BaseResultManager):
    """
    Stage 2 結果管理器 (重構版)

    整合功能:
    - ✅ 結果構建 (原 build_final_result())
    - ✅ JSON 格式保存 (基類提供)
    - ✅ HDF5 格式保存 (Stage 2 專用擴展)
    - ✅ 雙格式保存 (JSON + HDF5)
    - ✅ Stage 1 輸出載入 (Stage 2 專用)
    - ✅ Metadata 合併 (使用基類工具)

    重構亮點:
    - 消除目錄創建、JSON保存、時間戳生成重複代碼
    - 使用基類 metadata 合併工具
    - 保留 HDF5 專用邏輯作為擴展
    - 100% 向後兼容
    """

    def __init__(self, logger_instance: Optional[logging.Logger] = None):
        """
        初始化 Stage 2 結果管理器

        Args:
            logger_instance: 日誌記錄器
        """
        super().__init__(logger_instance=logger_instance)

    # ==================== Abstract Methods Implementation ====================

    def get_stage_number(self) -> int:
        """返回階段編號"""
        return 2

    def get_stage_identifier(self) -> str:
        """返回階段識別字串"""
        return 'stage2_orbital_computing'

    def build_stage_results(self, **kwargs) -> Dict[str, Any]:
        """
        構建 Stage 2 結果結構 (重構自 build_final_result())

        Args:
            **kwargs: 必需參數
                - orbital_results: 軌道計算結果
                - start_time: 處理開始時間
                - processing_time: 處理耗時
                - input_data: 輸入數據
                - processing_stats: 處理統計
                - coordinate_system: 座標系統
                - propagation_method: 傳播方法
                - time_interval_seconds: 時間間隔
                - dynamic_calculation: 是否動態計算
                - coverage_cycles: 覆蓋週期

        Returns:
            Stage 2 完整輸出數據結構
        """
        # 提取參數
        orbital_results = kwargs.get('orbital_results', {})
        start_time = kwargs.get('start_time')
        processing_time = kwargs.get('processing_time')
        input_data = kwargs.get('input_data', {})
        processing_stats = kwargs.get('processing_stats', {})
        coordinate_system = kwargs.get('coordinate_system', 'TEME')
        propagation_method = kwargs.get('propagation_method', 'SGP4')
        time_interval_seconds = kwargs.get('time_interval_seconds', 60.0)
        dynamic_calculation = kwargs.get('dynamic_calculation', True)
        coverage_cycles = kwargs.get('coverage_cycles', 1.0)

        # 按星座分組統計
        constellation_stats = {}
        satellites_by_constellation = {}

        for satellite_id, result in orbital_results.items():
            constellation = result.constellation
            if constellation not in constellation_stats:
                constellation_stats[constellation] = 0
                satellites_by_constellation[constellation] = {}

            constellation_stats[constellation] += 1
            # 轉換為規格格式
            orbital_states = []
            for pos in result.teme_positions:
                orbital_state = {
                    'timestamp': pos.timestamp,
                    'position_teme': [pos.x, pos.y, pos.z],  # TEME 座標 (km)
                    'velocity_teme': [pos.vx, pos.vy, pos.vz],  # TEME 速度 (km/s)
                    'satellite_id': satellite_id,
                    # ✅ Grade A 標準: 移除估計誤差值
                    # SGP4 誤差應從算法實際計算獲取，不使用硬編碼估算值
                    # 參考: Vallado 2013, Table 3.2 - SGP4 精度範圍 0.5-5 km (視 TLE 新舊而定)
                }
                orbital_states.append(orbital_state)

            satellites_by_constellation[constellation][satellite_id] = {
                'satellite_id': satellite_id,
                'constellation': constellation,
                'epoch_datetime': result.epoch_datetime,
                'orbital_states': orbital_states,
                'propagation_successful': result.propagation_successful,
                'algorithm_used': result.algorithm_used,
                'coordinate_system': result.coordinate_system,
                'total_positions': len(result.teme_positions)
            }

        # 記錄統計信息
        self.logger.info(f"📊 最終結果統計:")
        for constellation, count in constellation_stats.items():
            self.logger.info(f"   {constellation}: {count} 顆衛星")

        # ✅ 使用基類工具合併 metadata
        upstream_metadata = input_data.get('metadata', {})
        stage2_metadata = {
            # Stage 2 特定信息
            'processing_start_time': start_time.isoformat() if start_time else '',
            'processing_end_time': datetime.now(timezone.utc).isoformat(),
            'processing_duration_seconds': processing_time.total_seconds() if processing_time else 0,
            'total_satellites_processed': processing_stats.get('total_satellites_processed', 0),
            'successful_propagations': processing_stats.get('successful_propagations', 0),
            'failed_propagations': processing_stats.get('failed_propagations', 0),
            'total_teme_positions': processing_stats.get('total_teme_positions', 0),
            'constellation_distribution': constellation_stats,
            'coordinate_system': coordinate_system,
            'propagation_method': propagation_method,
            'time_interval_seconds': time_interval_seconds,
            'dynamic_calculation_enabled': dynamic_calculation,
            'coverage_cycles': coverage_cycles,
            'architecture_version': 'v3.0',
            'processing_grade': 'A',
            'stage_concept': 'orbital_state_propagation',
            'tle_reparse_prohibited': True,
            'epoch_datetime_source': 'stage1_provided'
        }

        # 使用基類的 metadata 合併方法 (上游優先，補充 Stage 2 特定字段)
        merged_metadata = self._merge_upstream_metadata(upstream_metadata, stage2_metadata)

        return {
            'stage': 'stage2_orbital_computing',
            'satellites': satellites_by_constellation,
            'metadata': merged_metadata,
            'processing_stats': processing_stats,
            'next_stage_ready': True
        }

    def build_snapshot_data(
        self,
        processing_results: Dict[str, Any],
        processing_stats: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        構建 Stage 2 驗證快照數據

        基類會自動添加: stage, stage_number, timestamp, validation_passed

        Args:
            processing_results: Stage 2 完整處理結果
            processing_stats: 處理統計

        Returns:
            Stage 2 專用快照字段
        """
        metadata = processing_results.get('metadata', {})

        # 驗證基本完整性
        validation_passed = (
            processing_stats.get('successful_propagations', 0) > 0 and
            metadata.get('total_teme_positions', 0) > 0
        )

        return {
            'status': 'success' if validation_passed else 'failed',
            'validation_status': 'passed' if validation_passed else 'failed',
            'metadata': metadata,
            'processing_stats': processing_stats,
            'data_summary': {
                'total_satellites': metadata.get('total_satellites_processed', 0),
                'successful_propagations': metadata.get('successful_propagations', 0),
                'total_teme_positions': metadata.get('total_teme_positions', 0),
                'constellation_distribution': metadata.get('constellation_distribution', {})
            }
        }

    # ==================== Stage 2 Specific Extensions ====================

    def load_stage1_output(self) -> Dict[str, Any]:
        """
        載入 Stage 1 輸出數據 (Stage 2 專用方法)

        Returns:
            Dict[str, Any]: Stage 1 輸出數據

        Raises:
            FileNotFoundError: 找不到 Stage 1 輸出文件
        """
        stage1_output_dir = "data/outputs/stage1"

        if not os.path.exists(stage1_output_dir):
            raise FileNotFoundError(f"Stage 1 輸出目錄不存在: {stage1_output_dir}")

        # 尋找最新的 Stage 1 輸出文件
        patterns = [
            os.path.join(stage1_output_dir, "data_loading_output_*.json"),
            os.path.join(stage1_output_dir, "tle_data_loading_output_*.json")
        ]
        files = []
        for pattern in patterns:
            files.extend(glob.glob(pattern))

        if not files:
            raise FileNotFoundError(f"Stage 1 輸出文件不存在")

        stage1_output_file = max(files, key=os.path.getmtime)
        self.logger.info(f"📥 載入 Stage 1 輸出: {stage1_output_file}")

        with open(stage1_output_file, 'r', encoding='utf-8') as f:
            return json.load(f)

    def save_results(
        self,
        results: Dict[str, Any],
        output_format: str = 'both',
        custom_filename: Optional[str] = None
    ) -> str:
        """
        保存 Stage 2 處理結果 (覆寫基類方法以支援 HDF5)

        Args:
            results: 處理結果數據
            output_format: 輸出格式 ('json', 'hdf5', 'both')
            custom_filename: 自訂文件名 (不含副檔名)

        Returns:
            str: 主要輸出文件路徑

        Raises:
            IOError: 保存失敗
        """
        try:
            # 使用基類方法創建目錄和生成時間戳
            output_dir = self._create_output_directory(self.get_stage_number())
            timestamp = self._generate_timestamp()

            # 構建基礎文件名
            if custom_filename:
                base_filename = f"{custom_filename}_{timestamp}"
            else:
                base_filename = f"orbital_propagation_output_{timestamp}"

            output_files = []

            # JSON 格式（向後兼容）
            if output_format in ('json', 'both'):
                json_file = output_dir / f"{base_filename}.json"
                # 使用基類的 JSON 保存方法
                self._save_json(results, json_file)
                self.logger.info(f"📁 JSON 格式已保存: {json_file}")
                output_files.append(str(json_file))

            # HDF5 格式（Stage 2 專用擴展）
            if output_format in ('hdf5', 'both') and HDF5_AVAILABLE:
                hdf5_file = output_dir / f"{base_filename}.h5"
                self._save_results_hdf5(results, str(hdf5_file))
                self.logger.info(f"📦 HDF5 格式已保存: {hdf5_file}")
                output_files.append(str(hdf5_file))

            # 返回主要格式路徑（HDF5 優先，否則 JSON）
            return output_files[-1] if output_files else ""

        except Exception as e:
            self.logger.error(f"❌ 保存 Stage 2 結果失敗: {e}")
            raise IOError(f"無法保存 Stage 2 結果: {e}")

    def _save_results_hdf5(self, results: Dict[str, Any], output_file: str):
        """
        保存結果為 HDF5 格式 (Stage 2 專用擴展)

        學術標準格式，支援高效壓縮和大規模數據存儲

        Args:
            results: 處理結果數據
            output_file: HDF5 輸出文件路徑
        """
        if not HDF5_AVAILABLE:
            self.logger.warning("⚠️ h5py 未安裝，跳過 HDF5 保存")
            return

        with h5py.File(output_file, 'w') as f:
            # 保存元數據
            metadata = results.get('metadata', {})
            f.attrs['stage'] = results.get('stage', 'stage2_orbital_computing')
            f.attrs['coordinate_system'] = metadata.get('coordinate_system', 'TEME')
            f.attrs['architecture_version'] = metadata.get('architecture_version', 'v3.0')
            f.attrs['timestamp'] = datetime.now(timezone.utc).isoformat()
            f.attrs['total_satellites'] = metadata.get('total_satellites_processed', 0)

            # 保存衛星數據（按星座分組）
            satellites_data = results.get('satellites', {})

            for constellation_name, constellation_sats in satellites_data.items():
                if not isinstance(constellation_sats, dict):
                    continue

                # 創建星座組
                const_group = f.create_group(constellation_name)

                for sat_id, sat_data in constellation_sats.items():
                    # 創建衛星組
                    sat_group = const_group.create_group(sat_id)

                    # 提取軌道狀態數據
                    orbital_states = sat_data.get('orbital_states', [])
                    if not orbital_states:
                        continue

                    # TEME 位置 (N x 3)
                    positions = np.array([
                        state['position_teme'] for state in orbital_states
                    ], dtype=np.float64)

                    # TEME 速度 (N x 3)
                    velocities = np.array([
                        state['velocity_teme'] for state in orbital_states
                    ], dtype=np.float64)

                    # 時間戳 (N,)
                    timestamps = np.array([
                        state['timestamp'] for state in orbital_states
                    ], dtype='S32')

                    # 保存數據集（使用 gzip 壓縮）
                    sat_group.create_dataset(
                        'position_teme_km',
                        data=positions,
                        compression='gzip',
                        compression_opts=6
                    )
                    sat_group.create_dataset(
                        'velocity_teme_km_s',
                        data=velocities,
                        compression='gzip',
                        compression_opts=6
                    )
                    sat_group.create_dataset(
                        'timestamps_utc',
                        data=timestamps
                    )

                    # 衛星元數據
                    sat_group.attrs['constellation'] = sat_data.get('constellation', '')
                    sat_group.attrs['epoch_datetime'] = sat_data.get('epoch_datetime', '')
                    sat_group.attrs['algorithm_used'] = sat_data.get('algorithm_used', 'SGP4')
                    sat_group.attrs['total_positions'] = len(orbital_states)

        # 記錄壓縮效果
        file_size_mb = os.path.getsize(output_file) / (1024 * 1024)
        self.logger.info(f"📦 HDF5 文件大小: {file_size_mb:.1f} MB")

    # ==================== Backward Compatibility Interface ====================

    def build_final_result(
        self,
        orbital_results: Dict[str, Any],
        start_time: datetime,
        processing_time: timedelta,
        input_data: Dict[str, Any],
        processing_stats: Dict[str, Any],
        coordinate_system: str,
        propagation_method: str,
        time_interval_seconds: float,
        dynamic_calculation: bool,
        coverage_cycles: float
    ) -> Dict[str, Any]:
        """
        向後兼容接口: 原 build_final_result() 方法

        直接調用 build_stage_results() 實現
        """
        return self.build_stage_results(
            orbital_results=orbital_results,
            start_time=start_time,
            processing_time=processing_time,
            input_data=input_data,
            processing_stats=processing_stats,
            coordinate_system=coordinate_system,
            propagation_method=propagation_method,
            time_interval_seconds=time_interval_seconds,
            dynamic_calculation=dynamic_calculation,
            coverage_cycles=coverage_cycles
        )


# ==================== Factory Function ====================

def create_stage2_result_manager(
    logger_instance: Optional[logging.Logger] = None
) -> Stage2ResultManager:
    """
    工廠函數: 創建 Stage 2 結果管理器實例

    Args:
        logger_instance: 日誌記錄器

    Returns:
        Stage2ResultManager 實例
    """
    return Stage2ResultManager(logger_instance=logger_instance)
