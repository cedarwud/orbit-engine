"""
Stage 2 執行器 - 軌道狀態傳播層

重構版本：使用 StageExecutor 基類 + Stage2ConfigManager

Author: Orbit Engine Refactoring Team
Date: 2025-10-12
Version: 3.0 (Phase 4 P1 - Configuration Management)
"""

from typing import Dict, Any
from pathlib import Path

from .base_executor import StageExecutor
from .executor_utils import project_root


class Stage2Executor(StageExecutor):
    """
    Stage 2 執行器 - 軌道狀態傳播層 (v3.0)

    繼承自 StageExecutor，只需實現配置加載和處理器創建邏輯。
    """

    def __init__(self):
        super().__init__(
            stage_number=2,
            stage_name="軌道狀態傳播層 (v3.0 重構版本)",
            emoji="🛰️"
        )

    def load_config(self) -> Dict[str, Any]:
        """
        載入 Stage 2 配置

        使用 Stage2ConfigManager 加載配置，支持:
        - YAML 配置文件
        - 環境變數覆寫（flat + nested keys）
        - Fail-Fast 驗證
        - 向後兼容舊配置文件名稱

        Returns:
            Dict[str, Any]: 配置字典
        """
        # 導入 Stage2ConfigManager
        try:
            from stages.stage2_orbital_computing.stage2_config_manager import Stage2ConfigManager
        except ImportError:
            import sys
            sys.path.insert(0, str(project_root / 'src'))
            from stages.stage2_orbital_computing.stage2_config_manager import Stage2ConfigManager

        config_manager = Stage2ConfigManager()

        # 檢查配置文件（優先使用新命名）
        new_config_path = project_root / "config/stage2_orbital_computing_config.yaml"
        old_config_path = project_root / "config/stage2_orbital_computing.yaml"

        if new_config_path.exists():
            config_dict = config_manager.load_config(custom_path=new_config_path)
            print(f"✅ 已載入 Stage 2 配置: {new_config_path}")
        elif old_config_path.exists():
            config_dict = config_manager.load_config(custom_path=old_config_path)
            print(f"✅ 已載入 Stage 2 配置: {old_config_path}")
            print(f"⚠️  建議遷移至新配置文件名稱: {new_config_path.name}")
        else:
            config_dict = config_manager.load_config()
            print("⚠️ 未找到配置文件，使用預設配置")

        # 顯示配置摘要
        time_config = config_dict.get('time_series', {})
        sgp4_config = config_dict.get('sgp4_propagation', {})
        performance_config = config_dict.get('performance', {})

        print(f"📋 配置摘要:")
        print(f"   時間序列模式: {time_config.get('mode', 'N/A')}")
        print(f"   時間間隔: {time_config.get('interval_seconds', 'N/A')}秒")
        print(f"   覆蓋週期: {time_config.get('coverage_cycles', 'N/A')}x")
        print(f"   座標系統: {sgp4_config.get('output_coordinate_system', 'TEME')}")
        print(f"   SGP4 方法: {sgp4_config.get('method', 'SGP4')}")

        max_workers = performance_config.get('max_workers')
        if max_workers:
            print(f"   並行工作器: {max_workers} 個")
        else:
            print(f"   並行工作器: 動態計算")

        return config_dict

    def create_processor(self, config: Dict[str, Any]):
        """
        創建 Stage 2 處理器

        Args:
            config: load_config() 返回的配置字典

        Returns:
            Stage2OrbitalPropagationProcessor: 處理器實例
        """
        from stages.stage2_orbital_computing.stage2_orbital_computing_processor import Stage2OrbitalPropagationProcessor
        return Stage2OrbitalPropagationProcessor(config=config)


# ===== 向後兼容函數 =====

def execute_stage2(previous_results=None):
    """
    執行 Stage 2: 軌道狀態傳播層 (v3.0)

    向後兼容函數，保持原有調用方式。
    內部使用 Stage2Executor 類實現。

    Args:
        previous_results: 前序階段結果字典（必須包含 'stage1' 結果）

    Returns:
        tuple: (success: bool, result: ProcessingResult, processor: Stage2Processor)
    """
    executor = Stage2Executor()
    return executor.execute(previous_results)
