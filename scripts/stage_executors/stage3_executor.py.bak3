"""
Stage 3 執行器 - 座標系統轉換層

重構版本：使用 StageExecutor 基類，減少重複代碼。
Phase 4 P1: 遷移至 BaseConfigManager 統一配置管理

Author: Orbit Engine Refactoring Team
Date: 2025-10-12 (Refactored), 2025-10-15 (P1 Config Migration)
Version: 2.1 (Config Manager Integration)
"""

import sys
from typing import Dict, Any
from pathlib import Path

# Add src to Python path for imports
sys.path.insert(0, str(Path(__file__).resolve().parents[2] / 'src'))

from .base_executor import StageExecutor
from .executor_utils import project_root, is_sampling_mode
from stages.stage3_coordinate_transformation.stage3_config_manager import Stage3ConfigManager


class Stage3Executor(StageExecutor):
    """
    Stage 3 執行器 - 座標系統轉換層 (v3.1)

    繼承自 StageExecutor，只需實現配置加載和處理器創建邏輯。
    包含特殊的配置扁平化邏輯以保持向後兼容性。
    """

    def __init__(self):
        super().__init__(
            stage_number=3,
            stage_name="座標系統轉換層 (v3.1 重構版本)",
            emoji="🌍"
        )

    def load_config(self) -> Dict[str, Any]:
        """
        載入 Stage 3 配置

        使用 Stage3ConfigManager 統一配置管理：
        1. 從 YAML 文件載入配置
        2. 應用環境變數覆蓋
        3. 執行配置驗證
        4. 扁平化配置結構以適配現有處理器接口

        Returns:
            Dict[str, Any]: 扁平化的配置字典

        Raises:
            ValueError: 配置驗證失敗
        """
        # ✅ 使用 Stage3ConfigManager 統一配置管理
        config_manager = Stage3ConfigManager()

        # 嘗試使用新配置文件名，如果不存在則回退到舊配置文件名
        new_config_path = project_root / "config/stage3_coordinate_transformation_config.yaml"
        old_config_path = project_root / "config/stage3_coordinate_transformation.yaml"

        if new_config_path.exists():
            stage3_config = config_manager.load_config(custom_path=new_config_path)
            print(f"✅ 已載入 Stage 3 配置: {new_config_path}")
        elif old_config_path.exists():
            stage3_config = config_manager.load_config(custom_path=old_config_path)
            print(f"✅ 已載入 Stage 3 配置: {old_config_path} (舊配置文件，建議遷移)")
        else:
            # 使用預設配置
            stage3_config = config_manager.load_config()
            print("⚠️ 未找到配置文件，使用預設配置")

        # ✅ 向後兼容：扁平化配置結構 (適配處理器接口)
        config_compat = {
            'enable_geometric_prefilter': stage3_config.get('geometric_prefilter', {}).get('enabled', False),
            'coordinate_config': stage3_config.get('coordinate_config', {}),
            'precision_config': stage3_config.get('precision_config', {}),
            'cache_config': stage3_config.get('cache_config', {}),
            'parallel_config': stage3_config.get('parallel_config', {}),
            'iers_data': stage3_config.get('iers_data', {}),
            'reference_frames': stage3_config.get('reference_frames', {}),
            'output': stage3_config.get('output', {}),
            'validation': stage3_config.get('validation', {}),
            'performance': stage3_config.get('performance', {})
        }

        # ✅ 根據環境變量決定是否使用取樣模式 (向後兼容)
        use_sampling = is_sampling_mode()
        if use_sampling:
            config_compat['sample_mode'] = True
            config_compat['sample_size'] = 50

        # 顯示配置摘要
        print(f"📋 配置摘要:")
        print(f"   源座標系: {config_compat['coordinate_config'].get('source_frame', 'TEME')}")
        print(f"   目標座標系: {config_compat['coordinate_config'].get('target_frame', 'WGS84')}")
        print(f"   歲差章動模型: {config_compat['coordinate_config'].get('nutation_model', 'IAU2000A')}")
        print(f"   目標精度: {config_compat['precision_config'].get('target_accuracy_m', 0.5)}m")
        print(f"   幾何預篩選: {'啟用' if config_compat['enable_geometric_prefilter'] else '禁用'}")
        print(f"   處理模式: {'取樣模式' if use_sampling else '完整模式'}")

        # Stage 3 特別提示（處理時間較長）
        print('⏱️ Stage 3 座標轉換處理中，預計需要 5-15 分鐘...')

        return config_compat

    def create_processor(self, config: Dict[str, Any]):
        """
        創建 Stage 3 處理器

        Args:
            config: load_config() 返回的配置字典

        Returns:
            Stage3CoordinateTransformProcessor: 處理器實例
        """
        from stages.stage3_coordinate_transformation.stage3_coordinate_transform_processor import Stage3CoordinateTransformProcessor
        return Stage3CoordinateTransformProcessor(config=config)

    def get_previous_stage_number(self) -> int:
        """
        Stage 3 依賴 Stage 2 的結果

        Returns:
            int: 2
        """
        return 2


# ===== 向後兼容函數 =====

def execute_stage3(previous_results=None):
    """
    執行 Stage 3: 座標系統轉換層 (v3.1)

    向後兼容函數，保持原有調用方式。
    內部使用 Stage3Executor 類實現。

    Args:
        previous_results: 前序階段結果字典（必須包含 'stage2' 結果）

    Returns:
        tuple: (success: bool, result: ProcessingResult, processor: Stage3Processor)
    """
    executor = Stage3Executor()
    return executor.execute(previous_results)
