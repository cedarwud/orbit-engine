"""
Stage 6 執行器 - 研究數據生成層

重構版本：使用 StageExecutor 基類，減少重複代碼。
Phase 4 P1: 遷移至 BaseConfigManager 統一配置管理

Author: Orbit Engine Refactoring Team
Date: 2025-10-12 (Refactored), 2025-10-15 (P1 Config Migration)
Version: 2.1 (Config Manager Integration)
"""

import sys
from typing import Dict, Any
from pathlib import Path

# Add src to Python path for imports
sys.path.insert(0, str(Path(__file__).resolve().parents[2] / 'src'))

from .base_executor import StageExecutor
from .executor_utils import project_root
from stages.stage6_research_optimization.stage6_config_manager import Stage6ConfigManager


class Stage6Executor(StageExecutor):
    """
    Stage 6 執行器 - 研究數據生成層

    繼承自 StageExecutor，只需實現配置加載和處理器創建邏輯。
    Stage 6 不需要特殊配置，使用處理器預設值。
    """

    def __init__(self):
        super().__init__(
            stage_number=6,
            stage_name="研究數據生成層 (重構版本)",
            emoji="💾"
        )

    def load_config(self) -> Dict[str, Any]:
        """
        載入 Stage 6 配置

        使用 Stage6ConfigManager 統一配置管理：
        1. 從 YAML 文件載入配置
        2. 應用環境變數覆蓋
        3. 執行配置驗證

        Returns:
            Dict[str, Any]: 配置字典

        Raises:
            ValueError: 配置驗證失敗
        """
        # ✅ 使用 Stage6ConfigManager 統一配置管理
        config_manager = Stage6ConfigManager()

        # 嘗試使用新配置文件名，如果不存在則使用預設配置
        new_config_path = project_root / "config/stage6_research_optimization_config.yaml"

        if new_config_path.exists():
            config = config_manager.load_config(custom_path=new_config_path)
            print(f"✅ 已載入 Stage 6 配置: {new_config_path}")
        else:
            # 使用預設配置
            config = config_manager.load_config()
            print("⚠️ 未找到配置文件，使用預設配置")

        # 顯示配置摘要
        print(f"📋 配置摘要:")
        print(f"   A3 Offset: {config['gpp_events']['a3']['offset_db']} dB")
        print(f"   A4 RSRP門檻: {config['gpp_events']['a4']['rsrp_threshold_dbm']} dBm")
        print(f"   動態閾值: {'啟用' if config['dynamic_thresholds']['use_stage4_dynamic_thresholds'] else '禁用'}")
        print(f"   決策策略: {config['decision_support']['strategy']}")

        return config

    def create_processor(self, config: Dict[str, Any]):
        """
        創建 Stage 6 處理器

        Args:
            config: load_config() 返回的配置字典

        Returns:
            Stage6ResearchOptimizationProcessor: 處理器實例
        """
        from stages.stage6_research_optimization.stage6_research_optimization_processor import Stage6ResearchOptimizationProcessor
        return Stage6ResearchOptimizationProcessor(config=config)

    def get_previous_stage_number(self) -> int:
        """
        Stage 6 依賴 Stage 5 的結果

        Returns:
            int: 5
        """
        return 5


# ===== 向後兼容函數 =====

def execute_stage6(previous_results=None):
    """
    執行 Stage 6: 研究數據生成層

    向後兼容函數，保持原有調用方式。
    內部使用 Stage6Executor 類實現。

    Args:
        previous_results: 前序階段結果字典（必須包含 'stage5' 結果）

    Returns:
        tuple: (success: bool, result: ProcessingResult, processor: Stage6Processor)
    """
    executor = Stage6Executor()
    return executor.execute(previous_results)
