"""
Stage 5 執行器 - 信號品質分析層

重構版本：使用 StageExecutor 基類 + Stage5ConfigManager

Author: Orbit Engine Refactoring Team
Date: 2025-10-12
Version: 3.0 (Phase 4 P1 - Configuration Management)
"""

from typing import Dict, Any
from pathlib import Path

from .base_executor import StageExecutor
from .executor_utils import project_root


class Stage5Executor(StageExecutor):
    """
    Stage 5 執行器 - 信號品質分析層 (Grade A+ 模式)

    繼承自 StageExecutor，只需實現配置加載和處理器創建邏輯。
    包含特殊的配置驗證邏輯以確保學術合規性。
    """

    def __init__(self):
        super().__init__(
            stage_number=5,
            stage_name="信號品質分析層 (Grade A+ 重構版本)",
            emoji="📊"
        )

    def load_config(self) -> Dict[str, Any]:
        """
        載入 Stage 5 配置

        使用 Stage5ConfigManager 加載配置，支持:
        - YAML 配置文件
        - 環境變數覆寫（flat + nested keys）
        - Fail-Fast 驗證
        - 向後兼容

        Returns:
            Dict[str, Any]: 配置字典

        Raises:
            FileNotFoundError: 當配置文件不存在時
            ValueError: 當配置驗證失敗時
        """
        # 導入 Stage5ConfigManager
        try:
            from stages.stage5_signal_analysis.stage5_config_manager import Stage5ConfigManager
        except ImportError:
            import sys
            sys.path.insert(0, str(project_root / 'src'))
            from stages.stage5_signal_analysis.stage5_config_manager import Stage5ConfigManager

        config_manager = Stage5ConfigManager()

        # 檢查配置文件
        config_path = project_root / 'config' / 'stage5_signal_analysis_config.yaml'

        if not config_path.exists():
            raise FileNotFoundError(
                f"配置文件不存在: {config_path}\n"
                f"請確保配置文件存在於 config/stage5_signal_analysis_config.yaml"
            )

        # 載入並驗證配置 (ConfigManager 會自動驗證)
        config = config_manager.load_config(custom_path=config_path)

        # 顯示配置摘要
        print(f'✅ 已加載配置文件: {config_path.name}')
        print(f'✅ 配置驗證通過')

        signal_calc = config.get('signal_calculator', {})
        atmos_model = config.get('atmospheric_model', {})

        print(f'📋 配置摘要:')
        print(f'   帶寬: {signal_calc.get("bandwidth_mhz", "N/A")} MHz')
        print(f'   子載波間隔: {signal_calc.get("subcarrier_spacing_khz", "N/A")} kHz')
        print(f'   噪聲係數: {signal_calc.get("noise_figure_db", "N/A")} dB')
        print(f'   大氣溫度: {atmos_model.get("temperature_k", "N/A")} K')

        return config

    def create_processor(self, config: Dict[str, Any]):
        """
        創建 Stage 5 處理器

        Args:
            config: load_config() 返回的配置字典

        Returns:
            Stage5SignalAnalysisProcessor: 處理器實例
        """
        from stages.stage5_signal_analysis.stage5_signal_analysis_processor import Stage5SignalAnalysisProcessor
        return Stage5SignalAnalysisProcessor(config)

    def get_previous_stage_number(self) -> int:
        """
        Stage 5 依賴 Stage 4 的結果

        Returns:
            int: 4
        """
        return 4


# ===== 向後兼容函數 =====

def execute_stage5(previous_results=None):
    """
    執行 Stage 5: 信號品質分析層 (Grade A+ 模式)

    向後兼容函數，保持原有調用方式。
    內部使用 Stage5Executor 類實現。

    Args:
        previous_results: 前序階段結果字典（必須包含 'stage4' 結果）

    Returns:
        tuple: (success: bool, result: ProcessingResult, processor: Stage5Processor)
    """
    try:
        executor = Stage5Executor()
        return executor.execute(previous_results)
    except (FileNotFoundError, ValueError) as e:
        # 處理配置錯誤，提供友好的錯誤信息
        print(f'❌ 配置文件錯誤: {e}')
        import traceback
        traceback.print_exc()
        return False, None, None
