"""
Stage 5 驗證器 - 信號品質分析層 (3GPP TS 38.214 + ITU-R P.618) (重構版本)

使用 StageValidator 基類統一驗證流程

✅ Grade A+ 標準: 100% Fail-Fast 驗證
依據: docs/ACADEMIC_STANDARDS.md Line 265-274

Layer 2 驗證: 檢查驗證快照的合理性與架構合規性
信任 Layer 1 (Stage5Processor.run_validation_checks) 的詳細驗證結果

Author: Orbit Engine Refactoring Team
Date: 2025-10-12 (Phase 2 Refactoring)
Original: 2025-10-03
Updated: 2025-10-04 - Fail-Fast 重構
"""

from .base_validator import StageValidator
from typing import Tuple


class Stage5Validator(StageValidator):
    """
    Stage 5 驗證器 - 信號品質分析層 (3GPP TS 38.214 + ITU-R P.618)

    ✅ Grade A+ 標準: 分層 Fail-Fast 驗證
    - 第 1 層: 結構驗證（字段是否存在）
    - 第 2 層: 類型驗證（字段類型是否正確）
    - 第 3 層: 範圍驗證（值是否在合理範圍）
    - 第 4 層: 業務邏輯驗證（業務規則是否滿足）

    檢查項目:
    - 3GPP TS 38.214 標準合規性
    - ITU-R P.618 標準合規性
    - CODATA 2018 物理常數
    - 信號品質分布合理性
    - RSRP/RSRQ/SINR 指標範圍
    - 可用衛星比率
    """

    def __init__(self):
        super().__init__(
            stage_number=5,
            stage_identifier='stage5_signal_analysis'
        )

    def perform_stage_specific_validation(self, snapshot_data: dict) -> Tuple[bool, str]:
        """
        Stage 5 專用驗證 - Grade A+ 分層驗證

        檢查順序 (Fail-Fast):
        1. 結構驗證 - 檢查必要字段是否存在
        2. 類型驗證 - 檢查字段類型是否正確
        3. 範圍驗證 - 檢查值是否在合理範圍
        4. 業務邏輯驗證 - 檢查業務規則是否滿足

        Args:
            snapshot_data: 驗證快照數據

        Returns:
            tuple: (validation_passed: bool, message: str)
        """
        # ======== 第 1 層: 結構驗證 ========
        result = self._layer1_structure_validation(snapshot_data)
        if result is not None:
            return result

        # ======== 第 2 層: 類型驗證 ========
        result = self._layer2_type_validation(snapshot_data)
        if result is not None:
            return result

        # ======== 第 3 層: 範圍驗證 ========
        result = self._layer3_range_validation(snapshot_data)
        if result is not None:
            return result

        # ======== 第 4 層: 業務邏輯驗證 ========
        result = self._layer4_business_validation(snapshot_data)
        if result is not None:
            return result

        # 構建成功訊息
        return self._build_stage5_success_message(snapshot_data)

    def _layer1_structure_validation(self, snapshot_data: dict) -> Tuple[bool, str]:
        """
        第 1 層: 結構驗證 - 檢查必要字段是否存在

        Returns:
            tuple | None: (False, error_msg) 如果失敗，否則 None
        """
        # 檢查 data_summary 存在性
        exists, msg = self.check_field_exists(snapshot_data, 'data_summary')
        if not exists:
            return False, "❌ 快照數據缺少 'data_summary' - 關鍵摘要數據缺失"

        data_summary = snapshot_data['data_summary']

        # 檢查 data_summary 必要字段
        required_summary_fields = [
            'total_satellites_analyzed',
            'usable_satellites',
            'signal_quality_distribution',
            'average_rsrp_dbm',
            'average_sinr_db'
        ]

        for field in required_summary_fields:
            exists, msg = self.check_field_exists(data_summary, field, 'data_summary')
            if not exists:
                return False, msg

        # 檢查 metadata 存在性
        exists, msg = self.check_field_exists(snapshot_data, 'metadata')
        if not exists:
            return False, "❌ 快照數據缺少 'metadata' - 標準合規資訊缺失"

        return None  # 通過檢查

    def _layer2_type_validation(self, snapshot_data: dict) -> Tuple[bool, str]:
        """
        第 2 層: 類型驗證 - 檢查字段類型是否正確

        Returns:
            tuple | None: (False, error_msg) 如果失敗，否則 None
        """
        data_summary = snapshot_data['data_summary']

        # 驗證 total_satellites_analyzed 類型
        total_satellites = data_summary['total_satellites_analyzed']
        valid, msg = self.check_field_type(total_satellites, (int, float), 'total_satellites_analyzed')
        if not valid:
            return False, msg

        # 驗證 usable_satellites 類型
        usable_satellites = data_summary['usable_satellites']
        valid, msg = self.check_field_type(usable_satellites, (int, float), 'usable_satellites')
        if not valid:
            return False, msg

        # 驗證 signal_quality_distribution 類型
        signal_quality_distribution = data_summary['signal_quality_distribution']
        valid, msg = self.check_field_type(signal_quality_distribution, dict, 'signal_quality_distribution')
        if not valid:
            return False, msg

        # 驗證 average_rsrp_dbm 類型
        average_rsrp_dbm = data_summary['average_rsrp_dbm']
        if average_rsrp_dbm is not None:
            valid, msg = self.check_field_type(average_rsrp_dbm, (int, float), 'average_rsrp_dbm')
            if not valid:
                return False, msg

        # 驗證 average_sinr_db 類型
        average_sinr_db = data_summary['average_sinr_db']
        if average_sinr_db is not None:
            valid, msg = self.check_field_type(average_sinr_db, (int, float), 'average_sinr_db')
            if not valid:
                return False, msg

        return None  # 通過檢查

    def _layer3_range_validation(self, snapshot_data: dict) -> Tuple[bool, str]:
        """
        第 3 層: 範圍驗證 - 檢查值是否在合理範圍

        Returns:
            tuple | None: (False, error_msg) 如果失敗，否則 None
        """
        data_summary = snapshot_data['data_summary']

        total_satellites = data_summary['total_satellites_analyzed']
        usable_satellites = data_summary['usable_satellites']
        signal_quality_distribution = data_summary['signal_quality_distribution']
        average_rsrp_dbm = data_summary['average_rsrp_dbm']
        average_sinr_db = data_summary['average_sinr_db']

        # 驗證衛星數量合理性
        if total_satellites < 0:
            return False, f"❌ total_satellites_analyzed 值非法: {total_satellites} (必須 >= 0)"

        if usable_satellites < 0:
            return False, f"❌ usable_satellites 值非法: {usable_satellites} (必須 >= 0)"

        if usable_satellites > total_satellites:
            return False, f"❌ 數據不一致: usable_satellites ({usable_satellites}) > total_satellites_analyzed ({total_satellites})"

        # 驗證信號品質分布字段存在性
        required_quality_fields = ['excellent', 'good', 'fair', 'poor']
        for field in required_quality_fields:
            exists, msg = self.check_field_exists(signal_quality_distribution, field, 'signal_quality_distribution')
            if not exists:
                return False, msg

        # 驗證信號品質分布類型和範圍
        for field in required_quality_fields:
            value = signal_quality_distribution[field]
            valid, msg = self.check_field_type(value, (int, float), f'signal_quality_distribution[{field}]')
            if not valid:
                return False, msg
            if value < 0:
                return False, f"❌ signal_quality_distribution['{field}'] 值非法: {value} (必須 >= 0)"

        # 驗證 RSRP 範圍
        # SOURCE: 3GPP TS 38.215 v18.1.0 Section 5.1.1
        # 物理範圍: -140 to -20 dBm (考慮 LEO 衛星近距離場景)
        if average_rsrp_dbm is None:
            return False, "❌ average_rsrp_dbm 為 None - 缺少關鍵信號指標"

        valid, msg = self.check_field_range(average_rsrp_dbm, -140, -20, 'average_rsrp_dbm', 'dBm')
        if not valid:
            return False, (
                f"{msg}\n"
                f"   註: 3GPP UE報告範圍 -140 to -44 dBm 是量化範圍，非物理限制\n"
                f"   LEO衛星場景實際 RSRP 可能在 -30 to -60 dBm (符合學術研究)"
            )

        # 驗證 SINR（可選但建議提供）
        if average_sinr_db is None:
            return False, "❌ average_sinr_db 為 None - 缺少關鍵信號指標"

        return None  # 通過檢查

    def _layer4_business_validation(self, snapshot_data: dict) -> Tuple[bool, str]:
        """
        第 4 層: 業務邏輯驗證 - 檢查業務規則是否滿足

        Returns:
            tuple | None: (False, error_msg) 如果失敗，否則 None
        """
        data_summary = snapshot_data['data_summary']
        metadata = snapshot_data['metadata']

        total_satellites = data_summary['total_satellites_analyzed']
        usable_satellites = data_summary['usable_satellites']
        signal_quality_distribution = data_summary['signal_quality_distribution']

        # 業務規則 1: 必須分析了衛星
        if total_satellites == 0:
            return False, "❌ Stage 5 處理失敗: 0 顆衛星被分析 - 信號分析未執行"

        # 業務規則 2: 信號品質分布總和應該合理
        total_quality = sum([
            signal_quality_distribution['excellent'],
            signal_quality_distribution['good'],
            signal_quality_distribution['fair'],
            signal_quality_distribution['poor']
        ])

        if total_quality == 0:
            return False, "❌ signal_quality_distribution 總和為 0 - 信號品質數據缺失"

        # 業務規則 3: 檢查 3GPP 標準合規性
        exists, msg = self.check_field_exists(metadata, 'gpp_standard_compliance')
        if not exists:
            return False, msg

        if metadata['gpp_standard_compliance'] != True:
            return False, f"❌ 3GPP 標準合規性未通過: {metadata['gpp_standard_compliance']} (期望: True)"

        # 業務規則 4: 檢查 ITU-R 標準合規性
        exists, msg = self.check_field_exists(metadata, 'itur_standard_compliance')
        if not exists:
            return False, msg

        if metadata['itur_standard_compliance'] != True:
            return False, f"❌ ITU-R 標準合規性未通過: {metadata['itur_standard_compliance']} (期望: True)"

        # 業務規則 5: 檢查 3GPP 配置
        result = self._check_gpp_config(metadata)
        if result is not None:
            return result

        # 業務規則 6: 檢查 ITU-R 配置
        result = self._check_itur_config(metadata)
        if result is not None:
            return result

        # 業務規則 7: 檢查物理常數 (CODATA 2018)
        result = self._check_physical_constants(metadata)
        if result is not None:
            return result

        # 業務規則 8: 檢查可用衛星比率
        if total_satellites > 0:
            usable_rate = (usable_satellites / total_satellites) * 100
            if usable_rate < 50:
                return False, f"❌ 可用衛星比率過低: {usable_rate:.1f}% (應 ≥50%)"

        # 業務規則 9: 檢查時間序列完整性
        result = self._check_time_series_completeness(snapshot_data)
        if result is not None:
            return result

        return None  # 通過檢查

    def _check_gpp_config(self, metadata: dict) -> Tuple[bool, str]:
        """檢查 3GPP 配置"""
        exists, msg = self.check_field_exists(metadata, 'gpp_config')
        if not exists:
            return False, msg

        gpp_config = metadata['gpp_config']
        valid, msg = self.check_field_type(gpp_config, dict, 'gpp_config')
        if not valid:
            return False, msg

        exists, msg = self.check_field_exists(gpp_config, 'standard_version', 'gpp_config')
        if not exists:
            return False, msg

        standard_version = gpp_config['standard_version']
        if 'TS_38.214' not in standard_version:
            return False, f"❌ 3GPP 標準版本錯誤: {standard_version} (期望包含: TS_38.214)"

        return None

    def _check_itur_config(self, metadata: dict) -> Tuple[bool, str]:
        """檢查 ITU-R 配置"""
        exists, msg = self.check_field_exists(metadata, 'itur_config')
        if not exists:
            return False, msg

        itur_config = metadata['itur_config']
        valid, msg = self.check_field_type(itur_config, dict, 'itur_config')
        if not valid:
            return False, msg

        exists, msg = self.check_field_exists(itur_config, 'recommendation', 'itur_config')
        if not exists:
            return False, msg

        recommendation = itur_config['recommendation']
        if 'P.618' not in recommendation:
            return False, f"❌ ITU-R 標準錯誤: {recommendation} (期望包含: P.618)"

        return None

    def _check_physical_constants(self, metadata: dict) -> Tuple[bool, str]:
        """檢查物理常數 (CODATA 2018)"""
        exists, msg = self.check_field_exists(metadata, 'physical_constants')
        if not exists:
            return False, msg

        physical_constants = metadata['physical_constants']
        valid, msg = self.check_field_type(physical_constants, dict, 'physical_constants')
        if not valid:
            return False, msg

        exists, msg = self.check_field_exists(physical_constants, 'standard_compliance', 'physical_constants')
        if not exists:
            return False, msg

        if physical_constants['standard_compliance'] != 'CODATA_2018':
            return False, f"❌ 物理常數標準錯誤: {physical_constants['standard_compliance']} (期望: CODATA_2018)"

        return None

    def _check_time_series_completeness(self, snapshot_data: dict) -> Tuple[bool, str]:
        """
        檢查時間序列完整性 (🚨 P1-3 新增 2025-10-05)
        確保每顆衛星都有完整的 time_series 數據，防止下游 Stage 6 錯誤
        """
        if 'signal_analysis' not in snapshot_data:
            return False, "❌ 快照數據缺少 'signal_analysis' - Stage 6 依賴此數據進行事件檢測"

        signal_analysis = snapshot_data['signal_analysis']
        valid, msg = self.check_field_type(signal_analysis, dict, 'signal_analysis')
        if not valid:
            return False, msg

        # 統計時間序列數據
        satellites_with_time_series = 0
        satellites_without_time_series = []
        total_time_points = 0
        min_time_points = float('inf')
        max_time_points = 0

        for sat_id, sat_data in signal_analysis.items():
            valid, msg = self.check_field_type(sat_data, dict, f'signal_analysis[{sat_id}]')
            if not valid:
                return False, msg

            # 檢查 time_series 存在性
            if 'time_series' not in sat_data:
                satellites_without_time_series.append(sat_id)
                continue

            time_series = sat_data['time_series']
            valid, msg = self.check_field_type(time_series, list, f'signal_analysis[{sat_id}][time_series]')
            if not valid:
                return False, msg

            # 檢查 time_series 長度
            ts_length = len(time_series)
            if ts_length == 0:
                satellites_without_time_series.append(sat_id)
                continue

            satellites_with_time_series += 1
            total_time_points += ts_length
            min_time_points = min(min_time_points, ts_length)
            max_time_points = max(max_time_points, ts_length)

        # 驗證: 所有衛星必須有 time_series
        if satellites_without_time_series:
            return False, (
                f"❌ {len(satellites_without_time_series)} 顆衛星缺少 time_series 數據 "
                f"(例如: {satellites_without_time_series[:3]})\n"
                f"   Stage 6 依賴完整時間序列進行事件檢測，缺失將導致事件數量不足"
            )

        # 驗證: 至少應有合理數量的時間點
        if satellites_with_time_series > 0:
            avg_time_points = total_time_points / satellites_with_time_series
            MIN_EXPECTED_TIME_POINTS = 20  # Starlink ~35 點, OneWeb ~30 點

            if avg_time_points < MIN_EXPECTED_TIME_POINTS:
                return False, (
                    f"❌ 時間序列長度不足: 平均 {avg_time_points:.1f} 點 "
                    f"(期望 ≥ {MIN_EXPECTED_TIME_POINTS} 點)\n"
                    f"   範圍: {min_time_points}-{max_time_points} 點\n"
                    f"   Stage 6 需要充足的時間點才能檢測到足夠的 3GPP 事件"
                )

        return None  # 通過檢查

    def _build_stage5_success_message(self, snapshot_data: dict) -> Tuple[bool, str]:
        """構建 Stage 5 成功訊息"""
        data_summary = snapshot_data['data_summary']

        total_satellites = data_summary['total_satellites_analyzed']
        usable_satellites = data_summary['usable_satellites']
        signal_quality_distribution = data_summary['signal_quality_distribution']
        average_rsrp_dbm = data_summary['average_rsrp_dbm']
        average_sinr_db = data_summary['average_sinr_db']

        excellent = signal_quality_distribution['excellent']
        good = signal_quality_distribution['good']
        fair = signal_quality_distribution['fair']
        poor = signal_quality_distribution['poor']

        usable_rate = (usable_satellites / total_satellites * 100) if total_satellites > 0 else 0

        # 計算時間序列統計
        time_series_info = ""
        if 'signal_analysis' in snapshot_data:
            signal_analysis = snapshot_data['signal_analysis']
            satellites_with_time_series = 0
            total_time_points = 0
            min_time_points = float('inf')
            max_time_points = 0

            for sat_data in signal_analysis.values():
                if 'time_series' in sat_data and len(sat_data['time_series']) > 0:
                    ts_length = len(sat_data['time_series'])
                    satellites_with_time_series += 1
                    total_time_points += ts_length
                    min_time_points = min(min_time_points, ts_length)
                    max_time_points = max(max_time_points, ts_length)

            if satellites_with_time_series > 0:
                avg_time_points = total_time_points / satellites_with_time_series
                time_series_info = (
                    f" | 時間序列: {satellites_with_time_series}顆×{avg_time_points:.1f}點 "
                    f"(範圍: {min_time_points}-{max_time_points})"
                )

        status_msg = (
            f"✅ Stage 5 信號品質分析驗證通過 | "
            f"分析 {total_satellites} 顆衛星 → {usable_satellites} 顆可用 ({usable_rate:.1f}%) | "
            f"品質分布: 優{excellent}/良{good}/可{fair}/差{poor} | "
            f"RSRP={average_rsrp_dbm:.1f}dBm, SINR={average_sinr_db:.1f}dB"
            f"{time_series_info} | "
            f"[3GPP✓, ITU-R✓, CODATA_2018✓, TimeSeriesComplete✓]"
        )

        return True, status_msg

    def uses_validation_framework(self) -> bool:
        """Stage 5 不使用標準 validation_results 格式，自行實現 Fail-Fast"""
        return False


# ============================================================
# 向後兼容函數 (保留原始接口)
# ============================================================

def check_stage5_validation(snapshot_data: dict) -> tuple:
    """
    Stage 5 專用驗證 - 信號品質分析層 (3GPP TS 38.214 + ITU-R P.618)

    ⚠️ 向後兼容函數: 內部調用 Stage5Validator 類

    ✅ Grade A+ 標準: 分層 Fail-Fast 驗證

    檢查項目:
    - 3GPP TS 38.214 標準合規性
    - ITU-R P.618 標準合規性
    - CODATA 2018 物理常數
    - 信號品質分布合理性
    - RSRP/RSRQ/SINR 指標範圍
    - 可用衛星比率

    Args:
        snapshot_data: 驗證快照數據

    Returns:
        tuple: (validation_passed: bool, message: str)
    """
    validator = Stage5Validator()
    return validator.validate(snapshot_data)
