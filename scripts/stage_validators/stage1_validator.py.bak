"""
Stage 1 驗證器 - TLE 數據載入層 (重構版本)

使用 StageValidator 基類統一驗證流程

Layer 2 驗證: 檢查驗證快照的合理性與架構合規性
信任 Layer 1 (Stage1Processor.run_validation_checks) 的詳細驗證結果

Author: Orbit Engine Refactoring Team
Date: 2025-10-12 (Phase 2 Refactoring)
Original: 2025-10-03
"""

from .base_validator import StageValidator
from typing import Tuple
import os


class Stage1Validator(StageValidator):
    """
    Stage 1 驗證器 - TLE 數據載入層

    檢查項目:
    - 數據完整性 (衛星數量、星座分布)
    - 時間基準合規性 (禁止統一時間基準)
    - 配置完整性 (constellation_configs, research_configuration)
    - TLE 格式品質 (抽樣檢查 20 顆)
    - Epoch 多樣性 (至少 5 個不同 epoch)
    """

    def __init__(self):
        super().__init__(
            stage_number=1,
            stage_identifier='stage1_orbital_calculation'
        )

    def perform_stage_specific_validation(self, snapshot_data: dict) -> Tuple[bool, str]:
        """
        Stage 1 專用驗證

        檢查項目:
        - 衛星數量完整性檢查
        - 星座配置完整性
        - 研究配置完整性
        - TLE 格式品質檢查
        - Epoch 多樣性檢查

        Args:
            snapshot_data: 驗證快照數據

        Returns:
            tuple: (validation_passed: bool, message: str)
        """
        # 檢查基本狀態
        if snapshot_data.get('status') != 'success':
            status = snapshot_data.get('status', 'unknown')
            return False, f"❌ Stage 1 執行狀態異常: {status}"

        if not snapshot_data.get('validation_passed', False):
            return False, "❌ Stage 1 驗證未通過"

        data_summary = snapshot_data.get('data_summary', {})
        satellite_count = data_summary.get('satellite_count', 0)
        next_stage_ready = snapshot_data.get('next_stage_ready', False)

        # 獲取 metadata
        metadata = snapshot_data.get('metadata', {})

        # 檢查統一時間基準違規
        result = self._check_forbidden_time_fields(metadata)
        if result is not None:
            return result

        # 檢查星座配置完整性
        result = self._check_constellation_configs(metadata, data_summary)
        if result is not None:
            return result

        # 獲取星座統計
        constellation_stats = metadata.get('constellation_statistics', {})
        starlink_count = constellation_stats.get('starlink', {}).get('count', 0)
        oneweb_count = constellation_stats.get('oneweb', {}).get('count', 0)
        expected_total = starlink_count + oneweb_count

        if expected_total == 0:
            return False, "❌ Stage 1 constellation_statistics 數據缺失或無效"

        # 檢查研究配置完整性
        result = self._check_research_configuration(metadata)
        if result is not None:
            return result

        # TLE 格式品質檢查
        result = self._check_tle_quality(snapshot_data)
        if result is not None:
            return result

        # Epoch 多樣性檢查
        result = self._check_epoch_diversity(snapshot_data)
        if result is not None:
            return result

        # 衛星數量完整性檢查
        min_acceptable = int(expected_total * 0.95)  # 95% 完整度標準

        if satellite_count < min_acceptable:
            completeness = (satellite_count / expected_total * 100) if expected_total > 0 else 0
            return False, f"❌ Stage 1 數據不完整: 僅載入{satellite_count}顆衛星 (完整度:{completeness:.1f}%，需要≥{min_acceptable}顆)"

        if not next_stage_ready:
            return False, f"❌ Stage 1 下階段未準備好: {satellite_count}顆衛星, next_stage_ready={next_stage_ready}"

        # 構建成功訊息
        completeness = (satellite_count / expected_total * 100) if expected_total > 0 else 0

        # 獲取 Epoch 統計
        satellites_sample = snapshot_data.get('satellites_sample', [])
        epoch_times = [sat.get('epoch_datetime') for sat in satellites_sample[:20] if sat.get('epoch_datetime')]
        unique_epochs = len(set(epoch_times))

        is_refactored = snapshot_data.get('refactored_version', False)
        status_msg = (
            f"{'(重構版) ' if is_refactored else ''}✅ Stage 1 數據完整性檢查通過: "
            f"載入{satellite_count}顆衛星 (完整度:{completeness:.1f}%, Starlink:{starlink_count}, OneWeb:{oneweb_count}) | "
            f"品質檢查: 20顆樣本✓, TLE格式✓, Epoch多樣性 {unique_epochs}/20✓ | "
            f"[constellation_configs✓, research_config✓]"
        )

        return True, status_msg

    def _check_forbidden_time_fields(self, metadata: dict) -> Tuple[bool, str]:
        """
        檢查禁止的統一時間基準字段

        Returns:
            tuple | None: (False, error_msg) 如果發現違規，否則 None
        """
        forbidden_time_fields = ['calculation_base_time', 'primary_epoch_time', 'unified_time_base']

        for field in forbidden_time_fields:
            if field in metadata:
                return False, f"❌ Stage 1 學術標準違規: 檢測到禁止的統一時間基準字段 '{field}'"

        return None  # 通過檢查

    def _check_constellation_configs(self, metadata: dict, data_summary: dict) -> Tuple[bool, str]:
        """
        檢查星座配置完整性

        Returns:
            tuple | None: (False, error_msg) 如果發現問題，否則 None
        """
        constellation_configs = metadata.get('constellation_configs', {})
        has_starlink_config = 'starlink' in constellation_configs
        has_oneweb_config = 'oneweb' in constellation_configs

        if not has_starlink_config or not has_oneweb_config:
            missing_constellations = []
            if not has_starlink_config:
                missing_constellations.append('starlink')
            if not has_oneweb_config:
                missing_constellations.append('oneweb')
            return False, f"❌ Stage 1 constellation_configs 缺失: {', '.join(missing_constellations)}"

        return None  # 通過檢查

    def _check_research_configuration(self, metadata: dict) -> Tuple[bool, str]:
        """
        檢查研究配置完整性

        Returns:
            tuple | None: (False, error_msg) 如果發現問題，否則 None
        """
        research_config = metadata.get('research_configuration', {})
        observation_location = research_config.get('observation_location', {})

        required_location_fields = ['name', 'latitude_deg', 'longitude_deg', 'altitude_m']
        missing_fields = [field for field in required_location_fields if field not in observation_location]

        if missing_fields:
            return False, f"❌ Stage 1 research_configuration.observation_location 缺失字段: {', '.join(missing_fields)}"

        # 驗證 NTPU 觀測點數據
        if observation_location.get('name') != 'NTPU':
            return False, f"❌ Stage 1 觀測點名稱錯誤: {observation_location.get('name')} (期望: NTPU)"

        return None  # 通過檢查

    def _check_tle_quality(self, snapshot_data: dict) -> Tuple[bool, str]:
        """
        TLE 格式品質檢查 (抽樣檢查 20 顆)

        Returns:
            tuple | None: (False, error_msg) 如果發現問題，否則 None
        """
        satellites_sample = snapshot_data.get('satellites_sample', [])
        sample_size = min(20, len(satellites_sample))

        if sample_size < 20:
            return False, f"❌ Stage 1 衛星抽樣不足: {sample_size}/20 顆（快照應包含至少20顆樣本）"

        # 檢查前 20 顆衛星的數據品質
        for i, sat in enumerate(satellites_sample[:20], start=1):
            # 檢查必要字段存在且非空
            required_fields = {
                'name': '衛星名稱',
                'tle_line1': 'TLE 第一行',
                'tle_line2': 'TLE 第二行',
                'epoch_datetime': 'Epoch 時間',
                'constellation': '星座歸屬'
            }

            for field, description in required_fields.items():
                if not sat.get(field):
                    return False, f"❌ Stage 1 數據品質問題: 第{i}顆衛星缺少{description} ({field})"

            # 檢查 TLE 格式（嚴格 69 字符 NORAD 標準）
            tle_line1 = sat.get('tle_line1', '')
            tle_line2 = sat.get('tle_line2', '')

            if len(tle_line1) != 69:
                return False, f"❌ Stage 1 TLE 格式錯誤: 第{i}顆衛星 Line1 長度 {len(tle_line1)} ≠ 69"

            if len(tle_line2) != 69:
                return False, f"❌ Stage 1 TLE 格式錯誤: 第{i}顆衛星 Line2 長度 {len(tle_line2)} ≠ 69"

            # 檢查 TLE 行號正確性
            if not tle_line1.startswith('1 '):
                return False, f"❌ Stage 1 TLE 格式錯誤: 第{i}顆衛星 Line1 未以 '1 ' 開頭"

            if not tle_line2.startswith('2 '):
                return False, f"❌ Stage 1 TLE 格式錯誤: 第{i}顆衛星 Line2 未以 '2 ' 開頭"

        return None  # 通過檢查

    def _check_epoch_diversity(self, snapshot_data: dict) -> Tuple[bool, str]:
        """
        Epoch 多樣性檢查 (至少 5 個不同 epoch)

        Returns:
            tuple | None: (False, error_msg) 如果發現問題，否則 None
        """
        satellites_sample = snapshot_data.get('satellites_sample', [])
        epoch_times = []

        for sat in satellites_sample[:20]:
            epoch = sat.get('epoch_datetime')
            if epoch:
                epoch_times.append(epoch)

        if len(epoch_times) < 20:
            return False, f"❌ Stage 1 Epoch 數據不完整: 只有 {len(epoch_times)}/20 顆衛星有 epoch_datetime"

        # 檢查 Epoch 多樣性（至少 5 個不同的 epoch）
        unique_epochs = len(set(epoch_times))
        min_unique_epochs = 5

        if unique_epochs < min_unique_epochs:
            return False, f"❌ Stage 1 時間基準違規: Epoch 多樣性不足（{unique_epochs}/20 unique，應≥{min_unique_epochs}）"

        return None  # 通過檢查

    def uses_validation_framework(self) -> bool:
        """Stage 1 不使用標準 validation_results 格式"""
        return False

    def _is_sampling_mode(self, snapshot_data: dict) -> bool:
        """
        Stage 1 取樣模式判斷

        基於載入衛星數量判斷
        """
        satellite_count = snapshot_data.get('data_summary', {}).get('satellite_count', 0)

        # 少於 50 顆視為取樣模式
        if satellite_count < 50:
            return True

        # 檢查環境變數
        return super()._is_sampling_mode(snapshot_data)


# ============================================================
# 向後兼容函數 (保留原始接口)
# ============================================================

def check_stage1_validation(snapshot_data: dict) -> tuple:
    """
    Stage 1 專用驗證 - TLE 數據載入層

    ⚠️ 向後兼容函數: 內部調用 Stage1Validator 類

    檢查項目:
    - 數據完整性 (衛星數量、星座分布)
    - 時間基準合規性 (禁止統一時間基準)
    - 配置完整性 (constellation_configs, research_configuration)
    - TLE 格式品質 (抽樣檢查 20 顆)
    - Epoch 多樣性 (至少 5 個不同 epoch)

    Args:
        snapshot_data: 驗證快照數據

    Returns:
        tuple: (validation_passed: bool, message: str)
    """
    validator = Stage1Validator()
    return validator.validate(snapshot_data)
