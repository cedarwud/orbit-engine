# ================================
# Orbit Engine 環境配置範本
# ================================
# 🎯 使用方式：cp .env.example .env
# 🚀 零配置執行：腳本自動讀取 .env，無需手動 export

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 🧪 執行模式控制
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# 執行模式
# 0 = 完整模式（處理全部 9,079 顆衛星，約 15-20 分鐘）
# 注意: TEST_MODE=1 當前未實現衛星數量限制功能
ORBIT_ENGINE_TEST_MODE=0

# ⚠️ SAMPLING_MODE 已廢棄（2025-10-09）
# 原因: 減少時間點會破壞時間分辨率和算法準確性
# 快速測試建議: 使用 --stages 4-6 利用 Stage 2-3 緩存

# Stage 3 預篩選控制
# 0 = 啟用預篩選（優化模式，約3500顆衛星）
# 1 = 禁用預篩選（全量模式，9039顆衛星完整計算）⚠️ 用於測試可見性
ORBIT_ENGINE_STAGE3_NO_PREFILTER=1

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 🐍 Python 環境配置
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Python 輸出緩衝
# 1 = 即時輸出日誌（推薦）
# 0 = 緩衝輸出
PYTHONUNBUFFERED=1

# Python 模組路徑（容器內使用）
PYTHONPATH=/orbit-engine/src

# 日誌等級
LOG_LEVEL=INFO

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 📂 路徑配置（容器環境）
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# 專案名稱
ORBIT_ENGINE_NAME=orbit-engine
PROJECT_ROOT_NAME=orbit-engine-system

# 容器路徑
CONTAINER_ROOT=/orbit-engine
CONTAINER_DATA_ROOT=/orbit-engine/data
CONTAINER_SRC_ROOT=/orbit-engine/src
CONTAINER_CONFIG_ROOT=/orbit-engine/config
CONTAINER_SCRIPTS_ROOT=/orbit-engine/scripts
CONTAINER_TESTS_ROOT=/orbit-engine/tests

# 階段輸出路徑（容器內）
CONTAINER_OUTPUTS_ROOT=/orbit-engine/data/outputs
CONTAINER_STAGE1_OUTPUT=/orbit-engine/data/outputs/stage1
CONTAINER_STAGE2_OUTPUT=/orbit-engine/data/outputs/stage2
CONTAINER_STAGE3_OUTPUT=/orbit-engine/data/outputs/stage3
CONTAINER_STAGE4_OUTPUT=/orbit-engine/data/outputs/stage4
CONTAINER_STAGE5_OUTPUT=/orbit-engine/data/outputs/stage5
CONTAINER_STAGE6_OUTPUT=/orbit-engine/data/outputs/stage6

# TLE 數據與驗證路徑（容器內）
CONTAINER_TLE_DATA=/orbit-engine/data/tle_data
CONTAINER_VALIDATION_SNAPSHOTS=/orbit-engine/data/validation_snapshots
CONTAINER_LOGS=/orbit-engine/data/logs

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 📂 路徑配置（主機環境）
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# 主機路徑（相對路徑）
HOST_ROOT=./
HOST_DATA_ROOT=./data
HOST_SRC_ROOT=./src
HOST_CONFIG_ROOT=./config
HOST_SCRIPTS_ROOT=./scripts
HOST_TESTS_ROOT=./tests

# 階段輸出路徑（主機）
HOST_OUTPUTS_ROOT=./data/outputs
HOST_STAGE1_OUTPUT=./data/outputs/stage1
HOST_STAGE2_OUTPUT=./data/outputs/stage2
HOST_STAGE3_OUTPUT=./data/outputs/stage3
HOST_STAGE4_OUTPUT=./data/outputs/stage4
HOST_STAGE5_OUTPUT=./data/outputs/stage5
HOST_STAGE6_OUTPUT=./data/outputs/stage6

# TLE 數據與驗證路徑（主機）
HOST_TLE_DATA=./data/tle_data
HOST_VALIDATION_SNAPSHOTS=./data/validation_snapshots
HOST_LOGS=./data/logs

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 🔧 開發配置
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# 環境類型（統一為開發環境）
SATELLITE_ENV=development

# 驗證等級
# FAST = 快速驗證（開發用）
# FULL = 完整驗證（正式處理用）
VALIDATION_LEVEL=FAST

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 💡 使用說明
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# 📌 快速執行：
#   ./run.sh                  # 執行全部六階段（全量模式，約 15-20 分鐘）
#   ./run.sh --stage 5        # 只執行階段 5
#   ./run.sh --stages 4-6     # 利用 Stage 2-3 緩存，快速測試 Stage 4-6
#   make run                  # 使用 Makefile（等同 ./run.sh）
#   make run-stage STAGE=5    # 使用 Makefile 執行單一階段

# 📌 快速迭代開發建議：
#   首次執行: ./run.sh              # 建立 Stage 2-3 緩存（約 15-20 分鐘）
#   後續開發: ./run.sh --stages 4-6 # 利用緩存，只需 2-3 分鐘
#   說明: Stage 2-3 有 HDF5 緩存，後續執行會自動重用

# 📌 容器執行：
#   ./run-docker.sh           # 容器執行全部階段
#   make docker               # 使用 Makefile 容器執行
#   make docker-stage STAGE=5 # 容器執行單一階段

# 📌 環境狀態檢查：
#   make status               # 檢查環境配置狀態
